spring.application.name=currency-exchange-service

#our other application running on port 8080, so we need to change the port
server.port=8000

#configure for spring cloud stater config needs to connect to spring cloud config server
spring.config.import=optional:configserver:http://localhost:8888

#it will show us the sql queries in console
#spring.jpa.show-sql=true
# this will make static jdbc url for h2-console
spring.datasource.url=jdbc:h2:mem:testdb

# it will defer the data.sql file until spring create tables in database
spring.jpa.defer-datasource-initialization=true

#we are configuring naming server url
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#configuring for retry by default it will retry three times and mentioning retry api name
resilience4j.retry.instances.sample-api.maxAttempts=5
#setting time to wait for another retry request
resilience4j.retry.instances.sample-api.waitDuration=1s
#after enabling this it will exponentially wait between each attempt -> 1s, 1.5s, 2s, 4s
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

#configuration for circuitBreaker
#resilience4j.circuitbreaker.instances.default.failureRateThreshold=90

#configuration for RateLimiter
#how many request we allow in limitForPeriod
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s

#Configuration for Bulkhead
resilience4j.bulkhead.instances.default.maxConcurrentCalls=10
resilience4j.bulkhead.instances.sample-api.maxConcurrentCalls=10

#Configuration for Distributed tracing server (for microservices)
# how many requests we want to trace
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

#if you are facing `Connection timed out: getsockopt` add below line to application.properties in every microservice
eureka.instance.prefer-ip-address=true
